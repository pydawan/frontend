[[typescript-sdk]]
== TypeScript SDK

TypeScript SDK contains CUBA data model ({manual_platform}/data_model.html[entities and enums]), rest {manual_restApi_services}[services] and {manual_restApi_queries}[queries] as TypeScript classes.

The SDK is framework-agnostic, meaning that in addition to using it with e.g. our React client, you can use it with any TypeScript-compatible framework such as Angular of Vue.

It's possible to generate the following configurations of SDK depending on your needs (see link:#generator-reference[usage instruction]):

* `gen-cuba-front sdk:model` - generates entities and enums.
* `gen-cuba-front sdk:all` - generates all toolkit - entities, enums, queries and services.

SDK can be used for front-end clients and Node.js-based BFF (Backend for Frontend) development.

[[entities]]
=== Entities

[[persistent-entities]]
*Persistent Entities*

Consider the `Role` entity class of CUBA Framework generated in TypeScript:

`src/cuba/entities/base/sec$Role.ts`

[source,typescript]
----
export class Role extends StandardEntity {
    static NAME = "sec$Role";
    name?: string | null;
    locName?: string | null;
    description?: string | null;
    type?: any | null;
    defaultRole?: boolean | null;
    permissions?: Permission[] | null;
}
----

* You can easily access entity name using static `NAME` property: `Role.NAME`.
* `Role` class contains all properties of the domain model entity including those from the class hierarchy. Reference fields have corresponding types as well, so that you can work with them in a type-safe manner:
+
[source,typescript]
----
function changeRole(role: Role) {
  role.defaultRole = true;   // ok
  role.defaultRole = 'foo';  // compilation fails  
}
----

[[non-persistent-entities]]
*Non-persistent Entities*

CUBA Platform supports non-persistent entities. Entity class should be annotated with `com.haulmont.chile.core.annotations.MetaClass`, and extended from `com.haulmont.cuba.core.entity.BaseUuidEntity`. Class properties annotated with `com.haulmont.chile.core.annotations.MetaProperty` will be included in the generated model.

[[source]]
Source:

[source,java]
----
package com.company;

import com.haulmont.chile.core.annotations.MetaClass;
import com.haulmont.chile.core.annotations.MetaProperty;
import com.haulmont.cuba.core.entity.BaseUuidEntity;

@MetaClass(name = "SampleUserInfo")
public class SampleUserInfo extends BaseUuidEntity {

    @MetaProperty
    public String firstName;

    @MetaProperty
    public String lastName;
    
    }
----

[[generated]]
Generated:

[source,typescript]
----
export class SampleUserInfo {
    static NAME = "SampleUserInfo";
    firstName?: string | null;
    lastName?: string | null;
}
----

[[enums]]
=== Enums

CUBA REST API module uses enumâ€™s constant name in client-server communication. SDK contains generated string enums e.g.:

[source,typescript]
----
export enum CarType {
    SEDAN = "SEDAN",
    HATCHBACK = "HATCHBACK"
}
----

In order to get enum id and localized caption, you can query full information about enums in runtime using `loadEnums` method of {api_rest}[CUBA REST JS]:

[source,typescript]
----
import {EnumInfo, initializeApp} from "@cuba-platform/rest";

const cubaREST = initializeApp();
cubaREST.loadEnums()
    .then(((enums: EnumInfo[]) => {
        console.log('enums', enums)
    }));
----

Response example:

[source,json]
----
[{
    "name": "com.company.mpg.entity.CarType",
    "values": [
      {
        "name": "SEDAN",
        "id": "SEDAN",
        "caption": "Sedan"
      },
      {
        "name": "HATCHBACK",
        "id": "HATCHBACK",
        "caption": "Hatchback"
      }
    ]
  }]
----

[[generator-reference]]
== Frontend Generator Reference

NOTE: If you haven't read our introductory link:#getting-started[Getting Started] section, we encourage you to do so now. Installation of the Frontend Generator CLI tool is described link:#getting-started-using-cli[here].

NOTE: This section describes how to use the generator from CLI. You can also use many of the described features from CUBA Studio UI. The link:#commands-description[commands description] contains information on which features are available in Studio. See {manual_studio_frontendUi} for more details on using the generator from Studio.

Run `gen-cuba-front` (or `npx @cuba-platform/front-generator`) without arguments to see usage info.

....
Usage: gen-cuba-front [command] [options]

  Options:

    -v, --version  output the version number
    -h, --help     output usage information

  Commands:

    list [options]                                   List all available clients and their clients
    polymer2:app [options]                           Generates polymer2 app
    polymer2:blank-component [options]               Generates polymer2 blank-component
    polymer2:entity-cards [options]                  Generates polymer2 entity-cards
    polymer2:entity-edit [options]                   Generates polymer2 entity-edit
    polymer2:entity-list [options]                   Generates polymer2 entity-list
    polymer2:entity-management [options]             Generates polymer2 entity-management
    polymer2:query-results [options]                 Generates polymer2 query-results
    polymer2:service-data [options]                  Generates polymer2 service-data
    polymer2:service-form [options]                  Generates polymer2 service-form
    polymer2-typescript:app [options]                Generates polymer2-typescript app
    polymer2-typescript:blank-component [options]    Generates polymer2-typescript blank-component
    polymer2-typescript:entity-cards [options]       Generates polymer2-typescript entity-cards
    polymer2-typescript:entity-edit [options]        Generates polymer2-typescript entity-edit
    polymer2-typescript:entity-list [options]        Generates polymer2-typescript entity-list
    polymer2-typescript:entity-management [options]  Generates polymer2-typescript entity-management
    react-typescript:app [options]                   Generates react-typescript app
    react-typescript:blank-component [options]       Generates react-typescript blank-component
    react-typescript:entity-cards [options]          Generates react-typescript entity-cards
    react-typescript:entity-management [options]     Generates react-typescript entity-management
    sdk:all [options]                                Generates sdk all
    sdk:model [options]                              Generates sdk model
....

WARNING: Polymer client is deprecated

Run `gen-cuba-front <command> --help` to see the list of available options.

Most commands use interactive prompts to capture necessary inputs such as which entity you want to use, which
{manual_platform}/views.html[view], etc. Alternatively, `answers` command line parameter can be used to provide these inputs. You may want to use it if you want to automate the generation. `answers` is a base64-encoded JSON string. See link:#commands-description[descriptions of individual commands] for details on what shall be put inside this JSON.

Example of using `answers`:

....
gen-cuba-front react-typescript:entity-management \
  --dest ../model-playground/modules/front/src/app/car \
  --model /home/myusername/model-playground/projectModel.json \
  --dirShift ../../ \
  --answers eyJlZGl0VmlldyI6eyJuYW1lIjoiY2FyLXZpZXciLCJlbnRpdHlOYW1lIjoibXBnJENhciJ9LCJlZGl0Q29tcG9uZW50TmFtZSI6Im1wZy1jYXItZWRpdCIsImxpc3RWaWV3Ijp7Im5hbWUiOiJjYXItdmlldyIsImVudGl0eU5hbWUiOiJtcGckQ2FyIn0sImxpc3RDb21wb25lbnROYW1lIjoibXBnLWNhci1saXN0IiwibGlzdFR5cGUiOiJsaXN0IiwiZW50aXR5Ijp7Im5hbWUiOiJtcGckQ2FyIn0sIm1hbmFnZW1lbnRDb21wb25lbnROYW1lIjoibXBnLWNhci1tYW5hZ2VtZW50In0=
....

[[commands-description]]
=== Commands Description

[[react-typescriptapp]]
*react-typescript:app*

TIP: This feature is also available in CUBA Studio, see {manual_studio_frontendUi}.

Generates a React starter app. See link:#getting-started-with-react-client[Getting Started with React Client].

....
  Options:

    -d, --dest [dest]    destination directory
    -m, --model [model]  specify path to project model, if given no interactive prompt will be invoked
    -h, --help           output usage information
....

[[react-typescriptentity-management]]
*react-typescript:entity-management*

TIP: This feature is also available in CUBA Studio, see {manual_studio_frontendUi}

Generates:

- Route / main menu item
- *Edit component* - allows to edit an entity instance.
- *List component* - allows to view the list of entities and open the Edit component for a selected entity instance.
- *CRUD component* - component that renders a List component or an Edit component depending on whether the route path contains an `entityId` parameter (see https://reacttraining.com/react-router/[React Router] documentation for more details on how routing works in React client).

....
  Options:

    -d, --dest [dest]           destination directory
    -m, --model [model]         specify path to project model, if given no interactive prompt will be invoked
    -ds, --dirShift [dirShift]  directory shift for html imports e.g ../../
    -a, --answers [answers]     fulfilled params for generator to avoid interactive input in serialized JSON string
    -h, --help                  output usage information
....

Browser screen is available in one of the following flavors (we call it list types):

* list

image:react/browser-list.png[List browser example]

* cards

image:react/browser-cards.png[Cards browser example]

* table

image:react/data-table-demo.gif[Data table showcase]

`answers` format:

....
{
    "editView": {
      "name": "car-edit", // Name of view that will be used in Editor screen
      "entityName": "mpg$Car" // Entity name
    },
    "editComponentName": "CarEdit", // Editor component class name
    "listView": {
      "name": "car-edit", // Name of view that will be used in Browser screen
      "entityName": "mpg$Car" // Entity name
    },
    "listComponentName": "CarCards", // List component class name
    "listType": "cards", // List type: list, cards or table
    "entity": {
      "name": "mpg$Car" // Entity name
    },
    "managementComponentName": "CarManagement" // Management component class name (renders either Editor or Browser depending on current route)
    }
}
....

[[react-typescriptentity-cards]]
*react-typescript:entity-cards*

TIP: This feature is also available in CUBA Studio, see {manual_studio_frontendUi}

Generates a list of entities where each entity is represented by a card (similar to a List component with `"listType": "cards"`, but read-only, see link:#react-typescriptentity-management[react-typescript:entity-management])

....
  Options:

    -d, --dest [dest]           destination directory
    -m, --model [model]         specify path to project model, if given no interactive prompt will be invoked
    -ds, --dirShift [dirShift]  directory shift for html imports e.g ../../
    -a, --answers [answers]     fulfilled params for generator to avoid interactive input in serialized JSON string
    -h, --help                  output usage information
....

`answers` format:

....
{
    "entityView": {
      "name": "favoriteCar-view", // View name
      "entityName": "mpg$FavoriteCar" // Entity name
    },
    "componentName": "FavoriteCarCards", // Component class name
    "entity": {
      "name": "mpg$FavoriteCar" // Entity name
    }
}
....

[[react-typescriptblank-component]]
*react-typescript:blank-component*

TIP: This feature is also available in CUBA Studio, see {manual_studio_frontendUi}

Generates a blank component.

....
  Options:

    -d, --dest [dest]           destination directory
    -m, --model [model]         specify path to project model, if given no interactive prompt will be invoked
    -ds, --dirShift [dirShift]  directory shift for html imports e.g ../../
    -a, --answers [answers]     fulfilled params for generator to avoid interactive input in serialized JSON string
    -h, --help                  output usage information
....

`answers` format:

....
{
    "componentName": "BlankComponent" // Component class name
}
....

[[react-nativeapp]]
*react-native:app*

Generates a React Native starter app. See link:#react-native-client-getting-started[Getting Started with React Native Client].

....
  Options:

    -d, --dest [dest]    destination directory
    -m, --model [model]  specify path to project model, if given no interactive prompt will be invoked
    -vb, --verbose       log out additional info about generation process
    -h, --help           output usage information
....

[[sdkall]]
*sdk:all*

Generates framework-agnostic xref:typescript-sdk:index.adoc[TypeScript SDK]. It is also generated when executing `react-typescript:app` command.

....
  Options:

    -d, --dest [dest]    destination directory
    -m, --model [model]  specify path to project model, if given no interactive prompt will be invoked
    -h, --help           output usage information
....

[[sdkmodel]]
*sdk:model*

Generates SDK model only.

....
  Options:

    -d, --dest [dest]    destination directory
    -m, --model [model]  specify path to project model, if given no interactive prompt will be invoked
    -h, --help           output usage information
....

[[rest-api]]
== REST API

Generated frontend clients use {manual_restApi}[Generic REST API]. The detailed documentation on the API endpoints is published {restApiSwagger}[here].

CUBA REST JS library is used to communicate with Generic REST API. Documentation and API reference can be found {api_rest}[here].
